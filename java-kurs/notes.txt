
# Javada dosya adi ile 'class' adinin ayni olmasi gerekmektedir.

# System.out.println [ sout ] ile kisaltarak kullanabiliyoruz.

# Variable olustururken mutlaka türünü belirtmemiz gerekmektedir.

    public static void main(String[] args) {
        // Variable example 
        int a = 3;
        int b = 4;
        int c = 5;

        int toplam = a + 2* b + c; 
        System.out.println("Toplam = " + toplam);
    }

# yorum satiri kullanma
        // Variable example 
        /*
        This is for a long command line
         */

 /* int age = 25; // Bir tamsayı (integer) değişkeni
    double salary = 5000.0; // Bir ondalık sayı (double) değişkeni
    String name = "John Doe"; // Bir metin (string) değişkeni
    boolean isEmployed = true; // Bir boolean (mantıksal) değişkeni
    char grade = 'A'; // Bir karakter (char) değişkeni
    float temperature = 20.5f; // Bir kayan noktalı sayı (float) değişkeni
    short num = 100; // Bir kısa tamsayı (short) değişkeni
    long distance = 100000L; // Bir uzun tamsayı (long) değişkeni
    byte ageOfChild = 7; // Bir byte değişkeni
    double pi = Math.PI; // Bir sabit değişken (Math.PI sabitini kullandık)
*/

/* Double ve float arasindaki farklar ve benzerliklefa-rotate-180
    Hassasiyet: Double, float'tan daha yüksek bir hassasiyete sahiptir. Double, daha fazla sayıda ondalık basamağı depolayabilir ve daha doğru sonuçlar verir. Float, daha az sayıda ondalık basamağı depolayabilir ve bu nedenle daha az hassas sonuçlar verir.

    Bellek kullanımı: Double, float'tan daha fazla bellek kullanır. Double veri tipi, 8 bayt bellek kullanırken, float veri tipi 4 bayt bellek kullanır. Bu nedenle, double veri tipi daha fazla bellek tüketir.

    Hız: Float veri tipi, double veri tipine göre daha hızlıdır. Float veri tipi, daha az bellek kullanır ve daha az hassas sonuçlar verirken daha hızlı işlemler gerçekleştirir. Bu nedenle, float veri tipi, bellek kullanımı önemliyse veya yeterince hassas sonuçlar gerekmeyen uygulamalarda tercih edilebilir.

    Özetle, double ve float veri tipleri arasındaki ana fark, hassasiyet, bellek kullanımı ve hızdır. Double, daha hassas sonuçlar sağlar ancak daha fazla bellek kullanır ve daha yavaştır. Float, daha az hassas sonuçlar verir, daha az bellek kullanır ve daha hızlıdır.

    Double ve float veri tiplerinin ortak yanları şunlardır:

    Sayısal verileri temsil etmek için kullanılırlar.
    İşaretli (pozitif veya negatif) ve kesirli sayıları temsil etmek için kullanılırlar.
    Her ikisi de Java'nın temel veri tiplerindendir.
    Her ikisi de IEEE 754 standardını takip eder ve virgülden sonraki sayıları ondalık olarak temsil eder.
    Her ikisi de aritmetik işlemlerde kullanılabilirler. Toplama, çıkarma, çarpma ve bölme gibi matematiksel işlemleri gerçekleştirebilirler.
    Her iki veri tipi de varsayılan değerleri vardır. Double varsayılan olarak 0.0, float ise 0.0f olarak tanımlanır.
    Özetle, double ve float veri tipleri sayısal verileri temsil etmek için kullanılır, IEEE 754 standardını takip ederler ve matematiksel işlemlerde kullanılabilirler.
*/

------------------------------------------------------------------------

Java'da bir Class, bir nesne için temel tanımı sağlayan bir kod şablonudur. Bu şablon, bir nesnenin nasıl oluşturulacağı, özellikleri (alanlar) ve davranışları (metotlar) gibi özellikleri tanımlar. Class, bir nesnenin özelliklerini ve davranışlarını belirlemek için kullanılan değişkenlerin, metotların ve yapıların bir koleksiyonudur.

Bir Object ise, Class'ın bir örneğidir. Class'tan türetilen her Object, sınıfın özelliklerine sahip olur ve bu özelliklerin değerleri, nesneye özgü özelliklere atanabilir. Bir Object, nesne adı verilen bir örnekleme süreciyle oluşturulur.

public class Araba {
    int hiz;
    int yolcuSayisi;

    public void hizlandir(int hizArtisi) {
        hiz += hizArtisi;
    }

    public void dur() {
        hiz = 0;
    }
}

Bu Class, bir araba nesnesinin özelliklerini ve davranışlarını tanımlar. Araba'nın hızı ve yolcu sayısı gibi özellikleri vardır, ayrıca hızlandırma ve durdurma gibi davranışlar da tanımlanmıştır.

Bu Class'tan bir Object yaratmak için, aşağıdaki gibi bir kod yazılabilir:

Araba arabam = new Araba();
arabam.hiz = 50;
arabam.yolcuSayisi = 4;
arabam.hizlandir(10);

Bu kod, "Araba" Class'ından bir nesne yaratır ve bu nesnenin özelliklerini ve davranışlarını tanımlar. Yeni nesnenin hızı 50, yolcu sayısı 4'tür ve hızı 10 artırmak için hızlandırma metodu çağrılır.

Class ve Object, Java'daki nesne yönelimli programlamanın temel kavramlarıdır. Class'lar, nesne tasarımını sağlarken, Object'ler, bu tasarımın örneklendirilmiş uygulamalarını sağlar.


------------------------------------------------------------------------


# for
/* for döngüsü, belirli bir aralıkta veya bir koleksiyonun elemanlarında gezinmek için kullanılır. Genellikle, döngüde kaç kez tekrarlanacağı bilinen durumlarda kullanılır. for döngüsünde, döngü değişkeni tanımlanır ve koşul sağlandığı sürece arttırılır veya azaltılır. */

    for (int i = 0; i < 10; i++) {
        System.out.println(i);
    }

# while
/* while döngüsü, koşulun doğru olduğu sürece döngüyü tekrarlar. Bu döngü yapısı, koşulun döngüden önce veya sonra tanımlanabileceği durumlar için kullanılabilir. while döngüsünde, döngü değişkeni tanımlanmaz ve koşul döngüden önce veya sonra kontrol edilir. */

    int i = 0;
    while (i < 10) {
        System.out.println(i);
        i++;
    }

Özetle, for döngüsü belirli bir aralıkta veya bir koleksiyonun elemanları üzerinde gezinmek için kullanılırken, while döngüsü, koşulun doğru olduğu sürece döngüyü tekrarlamak için kullanılır. İkisi arasındaki farklılıklar, hangi durumda hangi döngü yapısının kullanılacağına karar verilmesini sağlar.


# do-while
Java'da do-while döngüsü bir işlemi en az bir kez yapmak istediğimizde kullanılır. Döngüde belirtilen koşul yanlış olsa bile, işlem en az bir kez çalıştırılır.

Do-while döngüsü, while döngüsünden farklıdır çünkü while döngüsünde koşul önce kontrol edilir ve işlem yalnızca koşul doğru olduğunda yapılır. Do-while döngüsünde ise, işlem önce yapılır ve koşul daha sonra kontrol edilir. Bu nedenle, do-while döngüsü en az bir kez çalıştırılacağından emin olmak için kullanılır.

# do-while ve while arasinda ki farklar 

Koşulun kontrol edilme zamanı:
while döngüsünde, koşul başlangıçta kontrol edilir ve sadece koşul doğru olduğu sürece işlem(ler) tekrar edilir. do-while döngüsünde ise, işlem(ler) önce yapılır ve koşul daha sonra kontrol edilir. Bu nedenle, do-while döngüsü en az bir kez çalıştırılacağından emin olmak için kullanılır.

Döngünün sınırlarının belirlenmesi:
while döngüsünde, koşulun doğru olmaması durumunda döngü hiçbir zaman çalışmayacaktır. Bu nedenle, while döngüsü genellikle belirli bir sınırda çalışacak şekilde tasarlanır. do-while döngüsü ise, en az bir kez çalışacağından, belirli bir sınırda çalışması gerekmez.

Döngünün içindeki işlemler:
while döngüsü, işlemleri yalnızca koşul doğru olduğu sürece tekrar eder. Bu nedenle, döngü içindeki işlemler koşula bağlıdır. do-while döngüsünde ise, işlemler en az bir kez yapılacak şekilde tasarlanabilir.

int i = 6;
while (i < 5) { // 'i' 5 den kücük olmadigi calismaz.
    System.out.println(i);
    i++;
}
// Hiçbir şey yazdırmaz, çünkü koşul doğru değildir.

do {
    System.out.println(i);
    i++;
} while (i < 5);
// i'nin değeri 6 olduğu için, bu kod önce bir kez çalıştırılır ve hiçbir şey yazdırmaz. Sonra i değeri 7 olduğu için, koşul doğru değildir ve döngü sona erer. Bu nedenle, bu kod sadece bir kez yazdırma işlemi yapar.


# break
"break" anahtar kelimesi, döngü veya switch-case yapısının çalışmasını durdurmak için kullanılır.

Döngü içerisinde kullanıldığında, "break" ifadesi, döngünün koşulunun true olduğu herhangi bir yerde kullanıldığında döngüyü anında sonlandırır ve program kontrolü döngüden çıkar.

Switch-case yapısı içerisinde kullanıldığında, "break" ifadesi, bir "case" bloğundaki kodu tamamladıktan sonra, diğer "case" bloklarının işletilmesini engeller ve program kontrolünü switch-case yapısından çıkarır. Bu nedenle, her "case" bloğunun sonuna bir "break" ifadesi eklemek, switch-case yapısının doğru şekilde çalışmasını sağlar.

# continue
"continue" anahtar kelimesi, döngü yapıları içinde kullanıldığında döngünün devam etmesini sağlar ve o anda işlem yapılmamasını sağlar.

Döngü içerisinde kullanıldığında, "continue" ifadesi, döngünün koşulunun true olduğu herhangi bir yerde kullanıldığında, o anda işlenen döngü adımının geri kalanını atlar ve döngünün bir sonraki adımına geçer. Yani, o anda işlenen döngü adımının içindeki kodların geri kalanı çalıştırılmaz, direkt olarak döngünün bir sonraki adımına geçilir.

Örneğin, bir döngü içinde belirli bir koşulu sağlamayan durumlarda işlemlerin yapılmaması gerektiğinde "continue" anahtar kelimesi kullanılabilir. Bu sayede döngüdeki sadece belirli koşulu sağlayan durumlar işlenir ve diğer durumlar atlanarak döngü devam eder.


# Metodlar (Fonksiyonlar)

Java'da bir metot, bir programın belirli bir işlevini gerçekleştirmek için yazılan bir kod bloğudur. Metotlar, belirli bir isimle tanımlanır ve bu isimle çağrılırlar. Bir metot, parametreler olarak adlandırılan girdi değerlerini alabilir ve bir değer döndürebilir. Java'da metotlar, sınıfların içinde veya sınıfların dışında tanımlanabilirler.

[erişim_belirleyici] [değer_dönüş_tipi] [metot_ismi]([parametreler]){
  //Metot gövdesi
  //Yapılacak işlemler
  //Dönüş değeri (varsa)
}


Rest API:
Frame Work - Spring Boot

Class bir olgudur.
